AWSTemplateFormatVersion: '2010-09-09'

Description:
  create ec2 t2.micro instance for bastion host
Parameters:
  StackName:
        Description: An environment name that will be prefixed to resource names
        Type: String
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the web server
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  Subnets:
    Description: WebServer EC2 instance locate in public subnet
    Type: List<AWS::EC2::Subnet::Id>

  EC2HostSecurityGroup:
    Description: WebServer EC2 assigned with VPC Security Group
    Type: List<AWS::EC2::SecurityGroup::Id>

  SSHLocation:
    Description: Lockdown SSH access to the bastion host (default can be accessed
      from anywhere)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.

  InstanceType:
      Description: WebServer EC2 instance type
      Type: String
      Default: t2.micro
      AllowedValues:
        - t1.micro
        - t2.small
        - t2.micro
        - m1.small
        - m1.medium
        - m1.large
        - m1.xlarge
        - m2.xlarge
        - m2.2xlarge
        - m2.4xlarge
        - m3.xlarge
        - m3.2xlarge
        - c1.medium
        - c1.xlarge
        - cc1.4xlarge
        - cc2.8xlarge
        - cg1.4xlarge
      ConstraintDescription: must be a valid EC2 instance type.
  InstanceCount:
    Description: Number of EC2 instances to launch
    Type: Number
    Default: '1'
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: '64'
    m1.small:
      Arch: '64'
    m1.medium:
      Arch: '64'
    m1.large:
      Arch: '64'
    m1.xlarge:
      Arch: '64'
    m2.xlarge:
      Arch: '64'
    m2.2xlarge:
      Arch: '64'
    m2.4xlarge:
      Arch: '64'
    m3.xlarge:
      Arch: '64'
    m3.2xlarge:
      Arch: '64'
    c1.medium:
      Arch: '64'
    c1.xlarge:
      Arch: '64'
  AWSRegionArch2AMI:
    us-east-1:
      '32': ami-aba768c2
      '64': ami-81a768e8
    us-west-1:
      '32': ami-458fd300
      '64': ami-b18ed2f4
    us-west-2:
      '32': ami-fcff72cc
      '64': ami-feff72ce
    eu-west-1:
      '32': ami-018bb975
      '64': ami-998bb9ed
    sa-east-1:
      '32': ami-a039e6bd
      '64': ami-a239e6bf
    ap-southeast-1:
      '32': ami-425a2010
      '64': ami-5e5a200c
    ap-southeast-2:
      '32': ami-f98512c3
      '64': ami-43851279
    ap-northeast-1:
      '32': ami-7871c579
      '64': ami-7671c577
      
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref 'KeyName'
      InstanceType: !Ref 'InstanceType'
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch,
          !Ref 'InstanceType', Arch]]
      AvailabilityZone: !Select [ 0, !GetAZs ]
      SubnetId: !Select [ 0, !Ref Subnets ]
      SecurityGroupIds: !Ref EC2HostSecurityGroup
      Tags:
        -
          Key: "Name"
          Value: "ec2-pub1"
      BlockDeviceMappings:
      - DeviceName: /dev/sdc
        VirtualName: ephemeral0
  
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'SSHLocation'
Outputs:

  StackName:
        Value:
            !Ref AWS::StackName
  Instance:
    Value: !Ref EC2Instance
    Description: DNS Name of the newly created EC2 instance
    Export:
      Name:
        "Fn::Sub":
          - ${StackName}-PublicDnsNameID
          - StackName: !Ref AWS::StackName