Description: >
    Kim's Lab demo. 
    The hands-on lab include the following components template design - 
        vpc, security-groups, load-balancers, ec2 & auto-scaling , rds .

        auto-scaling group 希望同時含 on-daemon 及 spot.
        Load Balancer 如果可以就直接用 ALB.
Resources:

    VPC:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.us-east-2.amazonaws.com/cnf-stackset-lab-20171116-dlink/vpc.yml
            Parameters:
                StackName:    !Ref AWS::StackName                
                VpcCIDR:            10.180.0.0/16
                PublicSubnet1CIDR:  10.180.8.0/24
                PublicSubnet2CIDR:  10.180.16.0/24
                PrivateSubnet1CIDR: 10.180.24.0/24
                PrivateSubnet2CIDR: 10.180.32.0/24

    SecurityGroups:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.us-east-2.amazonaws.com/cnf-stackset-lab-20171116-dlink/security-groups.yml
            Parameters: 
                StackName: !GetAtt ["VPC", "Outputs.StackName"] 
                VPC: !GetAtt ["VPC","Outputs.VpcId"]
                PublicSubnet1CIDR:  10.180.8.0/24
                PublicSubnet2CIDR:  10.180.16.0/24


    ALB:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/cnf-stackset-lab-20171116-dlink/load-balancers.yml
            Parameters:
                StackName: !GetAtt ["VPC", "Outputs.StackName"] 
                VPC: !GetAtt ["VPC","Outputs.VpcId"]
                Subnets: !GetAtt ["VPC","Outputs.PublicSubnets"]
                SecurityGroup: !GetAtt ["SecurityGroups","Outputs.LoadBalancerSecurityGroup"]

    ASGEC2:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/cnf-stackset-lab-20171116-dlink/asgec2.yml
            Parameters:
                StackName: !GetAtt ["VPC", "Outputs.StackName"]
                Subnets: !GetAtt ["VPC","Outputs.PublicSubnets"]
                ALBTargetGroup: !GetAtt ["ALB","Outputs.ALBTargetGroup"]
                EC2HostSecurityGroup: !GetAtt ["SecurityGroups","Outputs.EC2HostSecurityGroup"]
                KeyName: labuserkey
                InstanceType: m3.medium
                SSHLocation: 0.0.0.0/0
                TargetCapacity: 2
                SpotPrice: 0

    RDS:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/cnf-stackset-lab-20171116-dlink/rds.yml
            Parameters:
                StackName: !GetAtt ["VPC", "Outputs.StackName"] 
                DbSecurityGroup: !GetAtt ["SecurityGroups","Outputs.DbSecurityGroup"]
                PrivateSubnet1: !GetAtt ["VPC", "Outputs.PrivateSubnet1"] 
                PrivateSubnet2: !GetAtt ["VPC", "Outputs.PrivateSubnet2"] 
                DatabaseUser: dlinkdemo
                DatabasePassword: dlinkdemo
                DatabaseName: dlinkdemo
                DatabaseSize: 5
                DatabaseEngine: mysql
                DatabaseInstanceClass: db.t2.micro

#create ec2 info
    # 1. region 2. ami 3. tier 4. vpc 5. subnet 6. tag name 7. sg
    # with default tenancy, default shutdown behavior for stop, add instance-volume for default


    #For Bastation usage
    # EC2:
    #     Type: AWS::CloudFormation::Stack
    #     Properties:
    #         TemplateURL: https://s3.amazonaws.com/cnf-stackset-lab-20171116-dlink/ec2.yml
    #         Parameters:
    #             StackName: !GetAtt ["VPC", "Outputs.StackName"]
    #             Subnets: !GetAtt ["VPC","Outputs.PublicSubnets"]
    #             EC2HostSecurityGroup: !GetAtt ["SecurityGroups","Outputs.EC2HostSecurityGroup"]
    #             KeyName: labuserkey
    #             InstanceType: t2.micro
    #             SSHLocation: 0.0.0.0/0
