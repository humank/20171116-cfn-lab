AWSTemplateFormatVersion: '2010-09-09'
Description:
  create ec2 spot request to runs on.

Conditions:
  SpotOnlyCond: !Not [ !Equals [ !Ref SpotPrice, 0 ] ]
  EnableASGCond: !Equals [ !Ref AutoscalingGroupOrSpot, "AutoscalingGroup" ]
  DisableASGCond: !Equals [ !Ref AutoscalingGroupOrSpot, "spotInstance" ]

Parameters:
  StackName:
        Description: An environment name that will be prefixed to resource names
        Type: String
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the web server
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  Subnets:
    Description: WebServer EC2 instance locate in public subnet
    Type: List<AWS::EC2::Subnet::Id>

  ALBTargetGroup:
    Description: The Application Load Balancer TargetGroup to register with
    Type: String

  EC2HostSecurityGroup:
    Description: WebServer EC2 assigned with VPC Security Group
    Type: List<AWS::EC2::SecurityGroup::Id>

  AsgInstanceType:
    Description: The instance which you request for spot fleet
    Default: m3.medium
    Type: String
    AllowedValues: [t2.small, t2.medium, m3.medium]

  AsgTargetCapacity:
    Description: The request ec2 instance spot capacity
    Type: String
    Default: 2

  ImageId:
    Type: String
    Default: ami-2803ac4e

  AutoscalingGroupOrSpot:
    Type: String
    Default: "AutoscalingGroup"
    Description: "Provision autoscaling group instance with spot or not."
    AllowedValues:
      - "AutoscalingGroup"
      - "spotInstance"

  SpotPrice:
    Type: Number
    Description: spot price for spot instances
    Default: 0.00

  PSPostfix:
    Type: String
    Description: Parameter Store postfix from Aurora creation stackname  

Mappings:
  AWSInstanceType2Arch:
    t2.small:
      Arch: '64'
    t2.micro:
      Arch: '64' 
    t2.medium: 
      Arch: '64' 
    m3.medium:
      Arch: '64' 
  AWSRegionArch2AMI:
    ap-northeast-1:
      '64': ami-2803ac4e
    us-east-1:
      '64': ami-6057e21a
    us-east-1:
      '64': ami-aa1b34cf
    us-west-1:
      '64': ami-1a033c7a
    us-west-2:
      '64': ami-32d8124a

Resources:
  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "root"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "*"
                Resource: "*"
  RootInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - 
          Ref: "RootRole"

  AppLaunchConfiguration:
    Condition: EnableASGCond
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId:
        !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch,
          !Ref 'AsgInstanceType', Arch]]
      IamInstanceProfile: !Ref RootInstanceProfile
      InstanceType: !Ref AsgInstanceType
      SecurityGroups: !Ref EC2HostSecurityGroup
      InstanceMonitoring: true
      KeyName: !Ref KeyName
      SpotPrice: 
        !If 
          - SpotOnlyCond
          - !Ref SpotPrice
          - !Ref AWS::NoValue
      UserData: 

        "Fn::Base64": 
              !Sub |
                #!/bin/bash
                echo "start to see !" >> /tmp/userdata.log 2>&1 
                auroraArn=${PSPostfix} >> /tmp/userdata.log 2>&1 
                echo $auroraArn >> /tmp/userdata.log 2>&1 
                
                yum install -y jq
                currentregion=`curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq .region -r`
                yum update -y >> /tmp/userdata.log 2>&1 
                yum remove httpd* php* -y >> /tmp/userdata.log 2>&1 
                yum install httpd24* -y >> /tmp/userdata.log 2>&1 
                yum install php70* -y >> /tmp/userdata.log 2>&1 
                
                chkconfig httpd on >> /tmp/userdata.log 2>&1 
                service httpd start >> /tmp/userdata.log 2>&1 

                cd /var/www/html >> /tmp/userdata.log 2>&1 

                export COMPOSER_HOME=~/.composer >> /tmp/userdata.log 2>&1 
                curl -sS https://getcomposer.org/installer | php >> /tmp/userdata.log 2>&1 
                php composer.phar require aws/aws-sdk-php >> /tmp/userdata.log 2>&1 
                
                curl -o index.php https://s3.us-east-2.amazonaws.com/cnf-stackset-lab-20171116-dlink/index.php >> /tmp/userdata.log 2>&1 
                sed -i 's/defaultRegion/'"$currentregion"'/g' index.php >> /tmp/userdata.log 2>&1
                sed -i 's/DatabaseURL-/DatabaseURL-'"$auroraArn"'/g' index.php >> /tmp/userdata.log 2>&1 
                sed -i 's/DatabasePassword-/DatabasePassword-'"$auroraArn"'/g' index.php >> /tmp/userdata.log 2>&1 
                sed -i 's/DatabaseName-/DatabaseName-'"$auroraArn"'/g' index.php >> /tmp/userdata.log 2>&1 
                sed -i 's/DatabaseUsername-/DatabaseUsername-'"$auroraArn"'/g' index.php >> /tmp/userdata.log 2>&1 

  AppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref AsgTargetCapacity
      LaunchConfigurationName: !Ref AppLaunchConfiguration
      Tags:
        - Value:
            "Fn::Sub":
              - "Web-${StackName}"
              - StackName: !Ref AWS::StackName
          Key: Name
          PropagateAtLaunch: true
      TargetGroupARNs: [ !Ref ALBTargetGroup ]
      MaxSize: 6
      MinSize: 2
      VPCZoneIdentifier:
        - !Select [ 0, !Ref Subnets ]
        - !Select [ 1, !Ref Subnets ]
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 2