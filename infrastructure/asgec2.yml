AWSTemplateFormatVersion: '2010-09-09'
Description:
  create ec2 spot request to runs on.
Parameters:
  StackName:
        Description: An environment name that will be prefixed to resource names
        Type: String
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the web server
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  Subnets:
    Description: WebServer EC2 instance locate in public subnet
    Type: List<AWS::EC2::Subnet::Id>

  ALBLoadBalancer:
    Description: AutoScaling group EC2 instances behind ALB
    Type: String

  EC2HostSecurityGroup:
    Description: WebServer EC2 assigned with VPC Security Group
    Type: List<AWS::EC2::SecurityGroup::Id>

  SSHLocation:
    Description: Lockdown SSH access to the bastion host (default can be accessed
      from anywhere)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.

  InstanceType:
    Description: The instance which you request for spot fleet
    Default: m3.medium
    Type: String

  TargetCapacity:
    Description: The request ec2 instance spot capacity
    Type: String
    Default: 2

  ImageId:
    Type: String
    Default: ami-2803ac4e
             
  # Resources:          
  #   SpotFleet:
  #     Type: AWS::EC2::SpotFleet
  #     Properties:
  #       SpotFleetRequestConfigData:
  #         IamFleetRole: !GetAtt [IAMFleetRole, Arn]
  #         LaunchSpecifications:
  #           - ImageId: ami-8c1be5f6
  #             InstanceType: !Ref InstanceType
  #             KeyName: !Ref KeyName
  #             Monitoring: 'true'
  #             SecurityGroups: !Ref EC2HostSecurityGroup
  #             SpotPrice: 0.02
  #             SubnetId: !Select [ 0, !Ref Subnets ]
  #         ReplaceUnhealthyInstances: 'true'
  #         TargetCapacity: !Ref TargetCapacity
  #         TerminateInstancesWithExpiration: 'true'
  #         #SpotPrice: 0.02
  
Resources:
  AppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SecurityGroups: !Ref EC2HostSecurityGroup
    #DependsOn: VPCGatewayAttachment
  AppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      #AvailabilityZones: [!Select [ 0, !GetAZs ]]
      # AvailabilityZones:
      #   -
      #     Fn::Select:
      #       - 0 
      #       - Fn::GetAZs: ""
      #   -
      #     Fn::Select:
      #       - 1
      #       - Fn::GetAZs: ""
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref AppLaunchConfiguration
      #TargetGroupARNs: [!Ref ALBLoadBalancer]
      MaxSize: 2
      MinSize: 1
      VPCZoneIdentifier:
        - !Select [ 0, !Ref Subnets ]
        - !Select [ 1, !Ref Subnets ]
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
