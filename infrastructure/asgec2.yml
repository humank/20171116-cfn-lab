AWSTemplateFormatVersion: '2010-09-09'
Description:
  create ec2 spot request to runs on.

Conditions:
  SpotOnlyCond: !Not [ !Equals [ !Ref SpotPrice, 0 ] ]
  EnableASGCond: !Equals [ !Ref AutoscalingGroupOrSpot, "AutoscalingGroup" ]
  DisableASGCond: !Equals [ !Ref AutoscalingGroupOrSpot, "spotInstance" ]

Parameters:
  StackName:
        Description: An environment name that will be prefixed to resource names
        Type: String
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the web server
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  Subnets:
    Description: WebServer EC2 instance locate in public subnet
    Type: List<AWS::EC2::Subnet::Id>

  ALBTargetGroup:
    Description: The Application Load Balancer TargetGroup to register with
    Type: String

  EC2HostSecurityGroup:
    Description: WebServer EC2 assigned with VPC Security Group
    Type: List<AWS::EC2::SecurityGroup::Id>

  AsgInstanceType:
    Description: The instance which you request for spot fleet
    Default: m3.medium
    Type: String

  AsgTargetCapacity:
    Description: The request ec2 instance spot capacity
    Type: String
    Default: 2

  ImageId:
    Type: String
    Default: ami-2803ac4e

  AutoscalingGroupOrSpot:
    Type: String
    Default: "AutoscalingGroup"
    Description: "Provision autoscaling group instance with spot or not."
    AllowedValues:
      - "AutoscalingGroup"
      - "spotInstance"

  SpotPrice:
    Type: Number
    Description: spot price for spot instances
    Default: 0.00

  PSPostfix:
    Type: String
    Description: Parameter Store postfix from Aurora creation stackname  

Resources:

  EC2Role:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: ['ec2cfn']

  AppLaunchConfiguration:
    Condition: EnableASGCond
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      #for debug level only, recommend not to bind it.
      #AssociatePublicIpAddress: true
      AssociatePublicIpAddress: false
      ImageId: !Ref ImageId
      IamInstanceProfile: !Ref EC2Role
      InstanceType: !Ref AsgInstanceType
      SecurityGroups: !Ref EC2HostSecurityGroup
      InstanceMonitoring: true
      KeyName: !Ref KeyName
      SpotPrice: 
        !If 
          - SpotOnlyCond
          - !Ref SpotPrice
          - !Ref AWS::NoValue
      UserData: 

        "Fn::Base64": 
              !Sub |
                #!/bin/bash
                echo "start to see !"
                auroraArn=${PSPostfix}
                echo $auroraArn
                
                yum update -y
                yum remove httpd* php* -y
                yum install httpd24* -y
                yum install php70* -y
                
                chkconfig httpd on
                service httpd start

                cd /var/www/html

                export COMPOSER_HOME=~/.composer
                curl -sS https://getcomposer.org/installer | php
                php composer.phar require aws/aws-sdk-php
                
                curl -o index.php https://s3.us-east-2.amazonaws.com/cnf-stackset-lab-20171116-dlink/index.php
                
                sed -i 's/DatabaseURL-/DatabaseURL-'"$auroraArn"'/g' index.php
                sed -i 's/DatabasePassword-/DatabasePassword-'"$auroraArn"'/g' index.php
                sed -i 's/DatabaseName-/DatabaseName-'"$auroraArn"'/g' index.php
                sed -i 's/DatabaseUsername-/DatabaseUsername-'"$auroraArn"'/g' index.php

  AppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref AsgTargetCapacity
      LaunchConfigurationName: !Ref AppLaunchConfiguration
      Tags:
        - Value:
            "Fn::Sub":
              - "Web-${StackName}"
              - StackName: !Ref AWS::StackName
          Key: Name
          PropagateAtLaunch: true
      #TargetGroupARNs: [!Ref ALBLoadBalancer]
      TargetGroupARNs: [ !Ref ALBTargetGroup ]
      MaxSize: 6
      MinSize: 2
      VPCZoneIdentifier:
        - !Select [ 0, !Ref Subnets ]
        - !Select [ 1, !Ref Subnets ]
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 2

  # EBSVolume:
  #   Type: AWS::EC2::Volume
  #   Properties:
  #     AutoEnableIO: false
  #     AvailabilityZone:
  #       Fn::Select:
  #         - 0 
  #         - Fn::GetAZs: ""
  #     Encrypted: false
  #     Iops: 100
  #     Size: 5
  #     Tags:
  #       - Key: Name
  #         Value: EBS-DISK
  #     VolumeType: io1

# Useful instruction

# debug the userdata runnong status >> /tmp/userdata.log 2>&1 

#echo export AWS_DEFAULT_REGION=${AWS::Region} >> /etc/profile
#echo export auroraArn=$(aws rds describe-db-instances --query DBInstances[0].DBInstanceArn | cut -c45-59) >> /etc/profile
#yum install -y jq
#theRegion=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)          
#aws configure set default.region $theRegion
#auroraArn=$(aws rds describe-db-instances --query DBInstances[0].DBInstanceArn | cut -c45-59)
